Spring - Framework
Spring Boot - Spring + Setting
Template engine - mustache
DB 접근 기술 - ORM Object... -> JPA; Java Persistence... > Hibernate
 > Entity manager(JPA core interface)
 > EM -- 1. Native query
 > EM -- 2. JPQL(객체 지향 쿼리 개념)
 > EM -- 3. Method(Persist Context)
* 뷰 리졸버는 컨트롤러가 반환한 논리적 뷰 이름(예: "home")과 Model 데이터를 받아 실제 Mustache 템플릿(예: home.mustache)으로 매핑합니다.

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
연관관계 ->> JOIN 필요할때 연관관계 설정해야함
관계차수(1:1 / 1:N / N:1 / M:N)
데이터 가져오는 - Lazy 전략(요구한것만) / Eager 전략(전부다)
 > we choose LAZY
JPA - 전체 게시글 목록을 연관관계 데이터를 가져온다면 불필요한 select 많이 일어날수있다

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
회원가입 기능

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
인증검사 vs 권한체크
아무나 게시글을 삭제할수있으면 안된다

1. Repository - 삭제 기능
2. Controller - 삭제 기능
3. Request

// 게시글 삭제 액션 처리
// /board/{{board.id}}/delete method="post"
// 1. 로그인 여부 확인(인증검사)
//  > 로그인 안되어있으면, 로그인 페이지로 리다이렉트 처리
//  > 로그인 되있으면, 게시글이 존재하는지 다시 확인 - 없으면, 이미 삭제된 게시물입니다
// 2. 권한 체크(1번 유저 게시물인데 3번 유저가 삭제할수없음)
// 3. 삭제 후, 인덱스(리스트) 화면으로 redirect

// 게시글 수정하기 화면 요청
// /board/{{board.id}}/update-form
// 1. 인증검사(로그인)
// 2. 수정할 게시글 존재여부확인
// 3. 권한 체크
// 4. 수정 폼에 기존 데이터 뷰 바인딩
@GetMapping("/board/{id}/update-form")
public String updateForm(
        @PathVariable(name="id") Long boardId,
        HttpServletRequest req, HttpSession hs) {
    // 1.
    User sessionUser = (User) hs.getAttribute("sessionUser");
    if(sessionUser == null) {
        return "redirect:/login-form";
    }
    // 2.
    Board b = boardRepository.findById(boardId);
    if (b == null) {
        throw new RuntimeException("There is no post to update");
    }
    // 3.
    if(!b.isOwner(sessionUser.getId())) {
        throw new RuntimeException("Not eligible to update");
    }
    // 4.
    req.setAttribute("board", b);
    // 내부에서 스프링컨테이너 뷰 리졸브를 활용해서 머스태치 파일 찾기
    return "board/update-form";
}

// 게시글 수정
    public Board updateById(Long id, BoardRequest.UpdateDTO reqDTO) {
        // dirty checking
        Board board = findById(id);
        board.setTitle(reqDTO.getTitle());
        board.setContent(reqDTO.getContent());
        // dirty checking process
        // 1) 영속성 컨텍스트가 엔티티 최초 조회 상태를 스냅샷으로 보관
        // 2) 필드 값 변경시 현재 상태와 스냅샷 비교
        // 3) 트랜잭션 커밋시점에 변경된 필드만 update 쿼리 자동생성
        return board;
    }